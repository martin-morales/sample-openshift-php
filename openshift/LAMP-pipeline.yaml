kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "lamp-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def templatePath = 'https://raw.githubusercontent.com/martin-morales/sample-openshift-php/master/openshift/lamp-example-template.json'
        def templateName = 'lamp-example'
        pipeline {
          agent {
            node {
              label 'php'
            }
          }
          options {
            timeout(time: 20, unit: 'MINUTES')
          }
          stages {
            stage('preamble') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      echo "Using project: ${openshift.project()}"
                    }
                  }
                }
              }
            }
            stage('cleanup') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      openshift.selector("all", [ template: templateName ]).delete()
                      if(openshift.selector("secrets", templateName).exists()) {
                        openshift.selector("secrets", templateName).delete()
                      }
                    }
                  }
                }
              }
            }
            stage('create') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      openshift.newApp(templatePath)
                    }
                  }
                }
              }
            }
            stage('build') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      def builds = openshift.selector("bc", templateName).related('builds')

                      timeout(5) {
                        builds.untilEach(1) {
                          return (it.object().status.phase == "Complete")
                        }
                      }
                    }
                  }
                }
              }
            }
            stage('deploy') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      def rm = openshift.select("dc", templateName).rollout().latest()

                      timeout(5) {
                        openshift.select("dc", templateName).related('pods').untilEach(1) {
                          return (it.object().status.phase == "Running")
                        }
                      }
                    }
                  }
                }
              }
            }
            stage('tag') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                    }
                  }
                }
              }
            }
          }
        }

    type: JenkinsPipeline