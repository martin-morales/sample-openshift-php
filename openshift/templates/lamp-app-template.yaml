kind: Template
apiVersion: v1
metadata:
  name: lamp-app
  annotations:
    openshift.io/display-name: PHP + MySql (Persistent)
    description: A simple two-tier application to demonstate a CI/CD pipeline froms
      scratch.
    tags: quickstart,php
    iconClass: icon-php
    openshift.io/long-description: This template defines resources needed to develop
      a LAMP application, including a build configuration, application deployment
      configuration, and database deployment configuration. The database is stored
      in persistent storage.
    openshift.io/provider-display-name: Harris Corporation - Martin Morales
    openshift.io/documentation-url: https://github.com/martin-morales/sample-openshift-php
    template.openshift.io/bindable: 'false'
message: 'The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.'
labels:
  template: lamp-app
  app: lamp-app
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the frontend objects defined in this template.
  required: true
  value: lamp-app
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  required: true
  value: openshift
- name: APPLICATION_DOMAIN
  displayName: Application Hostname
  description: The exposed hostname that will route to the Node.js service, if left
    blank a value will be defaulted.
  value: ''
- name: PHP_VERSION
  displayName: PHP Version
  description: Version of PHP to be used.
  required: true
  value: '7.1'
- name: DATABASE_VERSION
  displayName: MySQL Version
  description: Version of MySQL to be used.
  required: true
  value: '5.7'
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  required: true
  value: mysql
- name: DATABASE_IMAGE_NAME
  displayName: Database Image Name
  required: true
  value: mysql
- name: DATABASE_USER
  displayName: MongoDB Username
  description: Username for MySQL user that will be used for accessing the database.
  generate: expression
  from: user[A-Z0-9]{3}
- name: DATABASE_PASSWORD
  displayName: MongoDB Password
  description: Password for the MongoDB user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: DATABASE_NAME
  displayName: Database Name
  required: true
  value: sampledb
- name: DATABASE_ADMIN_PASSWORD
  displayName: Database Administrator Password
  description: Password for the database admin user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: SOURCE_REPOSITORY_URL
  displayName: Git Repository URL
  description: The URL of the repository with your application source code.
  required: true
  value: https://github.com/martin-morales/sample-openshift-php
- name: SOURCE_REPOSITORY_REF
  displayName: Git Reference
  description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
- name: CONTEXT_DIR
  displayName: Context Directory
  description: Set this to the relative path to your project if it is not in the root
    of your repository.
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the PHP container can use.
  required: true
  value: 512Mi
- name: MEMORY_MYSQL_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the MySQL container can use.
  required: true
  value: 512Mi
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${NAME}"
  stringData:
    database-name: "${DATABASE_NAME}"
    database-username: "${DATABASE_USER}"
    database-password: "${DATABASE_PASSWORD}"
    database-root-password: "${DATABASE_ADMIN_PASSWORD}"
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Keeps track of changes in the application image
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: "${CONTEXT_DIR}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: php:${PHP_VERSION}
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: "${NAME}"
              key: database-username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "${NAME}"
              key: database-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: "${NAME}"
              key: database-name
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}:latest"
    triggers:
    - type: ImageChange
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: "${NAME}"
          image: " "
          ports:
          - containerPort: 8080
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 3
            httpGet:
              path: "/"
              port: 8080
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 3
            httpGet:
              path: "/"
              port: 8080
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${DATABASE_SERVICE_NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: "${DATABASE_IMAGE_NAME}:${DATABASE_VERSION}"
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - name: "${DATABASE_SERVICE_NAME}"
          image: " "
          ports:
          - containerPort: 3306
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-username
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-password
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-name
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-root-password
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -h $HOSTNAME $MYSQL_DATABASE
                -e 'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
          resources:
            limits:
              memory: "${MEMORY_MYSQL_LIMIT}"
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/mysql/data"
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          emptyDir:
            medium: ''
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: sampledb
      protocol: TCP
      port: 3306
      targetPort: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
