kind: "Template"
apiVersion: "v1"
metadata:
  name: "lamp-pipeline-template"
parameters:
  - name: "GITHUB_WEBHOOK_SECRET"
    displayName: "GitHub Webhook Secret"
    description: "GitHub trigger secret. A difficult to guess string encoded as part of the webhook URL. Not encrypted."
    generate: "expression"
    from: "[a-zA-Z0-9]{40}"
  - name: "GENERIC_WEBHOOK_SECRET"
    displayName: "Generic Webhook Secret"
    description: "A secret string used to configure the Generic webhook."
    generate: "expression"
    from: "[a-zA-Z0-9]{40}"
objects:
  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "lamp-pipeline"
    spec:
      triggers:
        - type: "GitHub"
          github:
            secret: "${GITHUB_WEBHOOK_SECRET}"
        - type: "Generic"
          generic:
            secret: "${GENERIC_WEBHOOK_SECRET}"
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            // path of the template to use
            def templatePath = 'https://raw.githubusercontent.com/martin-morales/sample-openshift-php/master/openshift/templates/lamp-app-template.yaml'
            // name of the template that will be created
            def templateName = 'lamp-app'
            pipeline {
                agent {
                  node {
                    // spin up a node.js slave pod to run this build on. I believe you can use nodejs or maven here, which are the names of the centos7 Docker images. 'base' didn't work for me.
                    // https://docs.openshift.com/container-platform/3.9/using_images/other_images/jenkins_slaves.html
                    label 'nodejs'
                  }
                }
                options {
                    timeout(time: 20, unit: 'MINUTES')
                }

                stages {
                    stage('preamble') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject() {
                                        echo "Using project: ${openshift.project()}"
                                    }
                                }
                            }
                        }
                    }
                    stage('cleanup') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject() {
                                        // delete everything with this template label
                                        openshift.selector("all", [ template : templateName ]).delete()
                                        // delete any secrets with this template label
                                        if (openshift.selector("secrets", templateName).exists()) {
                                            openshift.selector("secrets", templateName).delete()
                                        }
                                    }
                                }
                            } // script
                        } // steps
                    } // stage
                    stage('create') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject() {
                                        // create a new application from the templatePath
                                        openshift.newApp(templatePath)
                                    }
                                }
                            } // script
                        } // steps
                    } // stage
                    stage('build') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject() {
                                        def builds = openshift.selector("bc", templateName).related('builds')
                                        builds.untilEach(1) {
                                            return (it.object().status.phase == "Complete")
                                        }
                                    }
                                }
                            } // script
                        } // steps
                    } // stage
                    stage('deploy') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject() {
                                        def rm = openshift.selector("dc", templateName).rollout()
                                        openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                            return (it.object().status.phase == "Running")
                                        }
                                    }
                                }
                            } // script
                        } // steps
                    } // stage
                    stage('tag') {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject() {
                                        // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                                        // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                                        // image to change and then deploy it to the staging environment
                                        openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                                    }
                                }
                            } // script
                        } // steps
                    } // stage
                } // stages
            } // pipeline
          type: JenkinsPipeline